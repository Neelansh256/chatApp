{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","userName","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","username","keys","Object","key","lastMessageKey","width","renderMessages","height","LoginForm","setUsername","password","setPassword","error","setError","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","onNewMessage","Audio","play","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95cd79df.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport {sendMessage,isTyping} from 'react-chat-engine';\r\nimport {SendOutlined,PictureOutlined} from '@ant-design/icons';\r\n\r\nconst MessageForm = (props) => {\r\n    const [value,setValue] = useState('');\r\n    const {chatId,creds} = props;\r\n    \r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const text = value.trim();\r\n        if(text.length > 0) sendMessage(creds,chatId,{text});\r\n        setValue('');\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n        isTyping(props,chatId);\r\n    }\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds,chatId,{files : event.target.files, text : ''})\r\n    }\r\n\r\n    return(\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input \r\n                className=\"message-input\" \r\n                placeholder=\"send a message\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                onSubmit={handleSubmit}\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\">\r\n                    <PictureOutlined className=\"picture-icon\" />\r\n                </span>\r\n            </label>\r\n            <input \r\n                type=\"file\"\r\n                multiple={false}\r\n                id=\"upload-button\"\r\n                style={{display:'none'}}\r\n                onChange={handleUpload}\r\n            />\r\n            <button className=\"send-button\">\r\n                <SendOutlined className=\"send-icon\" />\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default MessageForm;","const MyMessage = ({message}) => {\r\n\r\n    if(message?.attachments?.length > 0){\r\n        return (\r\n            <img \r\n            src={message.attachments[0].file} \r\n            alt=\"message-attachment\"\r\n            className=\"message-image\"\r\n            style={{float:'right'}}\r\n            />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className=\"message\" style={{float:'right',marginRight:'18px',color:'white',backgroundColor:'#3B2A50'}}>\r\n            {message.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyMessage;","const TheirMessage = ({lastMessage,message}) => {\r\n\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.userName !== message.sender.userName;\r\n\r\n    return(\r\n        <div className=\"message-row\">\r\n            {isFirstMessageByUser && (\r\n                <div\r\n                    className=\"message-avatar\"\r\n                    style={{backgroundImage: message.sender && `url(${message?.sender?.avatar})`}} \r\n                />\r\n            )}\r\n\r\n        {message?.attachments?.length > 0\r\n            ? (\r\n                < img \r\n                src={message.attachments[0].file} \r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{marginLeft:isFirstMessageByUser ? '4px' : '48px'}}\r\n                />\r\n            ) : (\r\n            <div className=\"message\" style={{float:'left',backgroundColor:'#CABCDC',marginLeft:isFirstMessageByUser ? '4px' : '48px'}}>\r\n                {message.text}\r\n            </div>\r\n            )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TheirMessage;","import MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\nconst ChatFeed = (props) => {\r\n    const {chats, activeChat, userName, messages} = props;\r\n    const chat = chats && chats[activeChat];\r\n\r\n    const renderReadReceipts = (message,isMyMessage) =>\r\n        chat.people.map((person,index) => person.last_read === message.id && (\r\n            <div\r\n                key={`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{\r\n                    float : isMyMessage ? 'right' : 'left',\r\n                    backgroundImage : `url(${person?.person?.avatar})`\r\n                    }}\r\n            />\r\n        ));\r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n\r\n        return keys.map((key,index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index-1];\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return (\r\n                <div key={`msg_${index}`} style={{width :'100%'}}>\r\n                    <div className = \"message-block\">\r\n                        {\r\n                            isMyMessage\r\n                            ? <MyMessage message={message} />\r\n                            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />\r\n                        }\r\n                    </div>\r\n\r\n                    <div className = \"read-receipts\" style={{marginRight : isMyMessage ? '18px' : '0px', marginLeft : isMyMessage ? '0px' : '68px'}}>\r\n                        {renderReadReceipts(message,isMyMessage)}\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n\r\n    if(!chat) return 'Loading...';\r\n\r\n    return (\r\n    <div className = \"chat-feed\">\r\n        <div className = \"chat-title-container\">\r\n            <div className = \"chat-title\">{chat.title}</div>\r\n            <div className = \"chat-subtitle\">\r\n            {chat.people.map((person) => ` ${person.person.username}`)}\r\n            </div>\r\n        </div>\r\n        {renderMessages()}\r\n        <div style={{height : '100px'}} />\r\n        <div className = \"message-form-container\">\r\n            <MessageForm {...props} chatId={activeChat} />\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default ChatFeed;","import {useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst projectID = \"e92e4996-43d3-43f7-9fda-7d014791b9a9\";\r\nconst LoginForm = () => {\r\n    const [username,setUsername] = useState('');\r\n    const [password,setPassword] = useState('');\r\n    const [error,setError] = useState('');\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const authObject = {'Project-ID' : projectID ,'User-Name' : username ,'User-Secret' : password};\r\n\r\n        try{\r\n            await axios.get('https://api.chatengine.io/chats/',{ headers : authObject});\r\n            localStorage.setItem('username',username);\r\n            localStorage.setItem('password',password);\r\n            window.location.reload();\r\n            setError('');\r\n        }catch(error){\r\n            setError(\"Incorrect Username or password!\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className=\"title\">Chat Application</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" value={username} placeholder=\"Username\" onChange={(event) => {setUsername(event.target.value)}} className=\"input\" required/>\r\n                    <input type=\"password\" value={password} placeholder=\"Password\" onChange={(event) => {setPassword(event.target.value)}} className=\"input\" required/>\r\n                    <div align=\"center\">\r\n                        <button type=\"submit\" className=\"button\">\r\n                            <span>Start Chatting</span>\r\n                        </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import {ChatEngine} from 'react-chat-engine';\r\nimport './App.css';\r\nimport ChatFeed from './components/ChatFeed';\r\nimport LoginForm from './components/LoginForm';\r\n\r\nconst App = () => {\r\n\r\n    if(!localStorage.getItem('username')) return <LoginForm />\r\n        return (\r\n            <ChatEngine\r\n                height=\"100vh\"\r\n                projectID=\"e92e4996-43d3-43f7-9fda-7d014791b9a9\"\r\n                userName= {localStorage.getItem('username')}\r\n                userSecret={localStorage.getItem('password')}\r\n                renderChatFeed = {(chatAppProps) => <ChatFeed {...chatAppProps} />}\r\n                onNewMessage={() => new Audio('https://chat-engine-assets.s3.amazonaws.com/click.mp3').play()}\r\n            />\r\n        );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));"],"sourceRoot":""}